apply plugin: 'groovy'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task prepareFunctionalTestEnvironment(type: Test) {
    description = 'Prepare functional tests environment'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports {
        html.setDestination(project.file("$html.destination/functional"))
        junitXml.setDestination(project.file("$junitXml.destination/functional"))
    }

    beforeTest { descriptor ->
        logger.lifecycle "$descriptor.name"
    }

    maxParallelForks = 1
    include '**/PrepareEnvironment.*'
}

task functionalTest(type: Test, dependsOn: prepareFunctionalTestEnvironment) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
    maxParallelForks = Math.max(Runtime.getRuntime().availableProcessors() - 1, 1)
    exclude '**/PrepareEnvironment.*'

    reports {
        html.setDestination(project.file("$html.destination/functional"))
        junitXml.setDestination(project.file("$junitXml.destination/functional"))
    }

    beforeTest { descriptor ->
        logger.lifecycle "Running test: $descriptor.name"
    }

    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
}

check.dependsOn functionalTest

dependencies {
    functionalTestCompile('org.spockframework:spock-core:1.1-groovy-2.4')
}
