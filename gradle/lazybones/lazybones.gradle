import java.nio.file.Files

ext {
    supportedLazybonesVersions = ['0.8.1', '0.8.2', '0.8.3']
    if (Boolean.TRUE == Boolean.valueOf(System.getenv('TRAVIS'))) {
        supportedJavaVersions = [System.getProperty('java.version').replaceFirst(/^1\.(\d+).+$/, '$1') as Integer]
    } else {
        supportedJavaVersions = 7..8
    }
    executeLazybones = { String javaVersion, String lazybonesVersion, List<String> lazybonesCommands ->
        def directory = Files.createTempDirectory(buildDir.toPath(), "lazybones").toFile()
        def home = '/home/lazybones'
        def templates = '/.lazybones/templates'
        def groovy = '/.groovy'
        def maven = '/.m2/repository'
        def userHome = System.getProperty("user.home")
        def commands = ['docker', 'run', '--rm',
                        '--volume', "${directory}:${home}/app",
                        '--volume', "${userHome + templates}:${home + templates}",
                        '--volume', "${userHome + groovy}:${home + groovy}",
                        '--volume', "${userHome + maven}:${home + maven}",
                        createTag(javaVersion, lazybonesVersion)]
        lazybonesCommands?.each {
            commands << it
        }
        exec {
            workingDir directory
            commandLine commands
        }
        directory
    }
}

task removeImages(type: Exec) {
    List<String> items = ['docker', 'rmi', '--force']
    supportedJavaVersions.each { source ->
        supportedLazybonesVersions.each { version ->
            items << createTag(source, version)
        }
    }
    commandLine = items
    ignoreExitValue = true
}

clean.dependsOn removeImages

def createTag(source, version) {
    "dkorotych/lazybones:${version}-jre${source}"
}
